import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { api } from "~/utils/api";
import { Header } from "~/components/Header";
import { useState } from "react";
import { Section } from "@prisma/client";
import { NoteEditor } from "~/components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Take Note</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedSection, setSelectedSection] = useState<Section | null>(null);

  const { data: sections, refetch: refetchSections } = api.section.getAll.useQuery(
      undefined,
      {
        enabled: sessionData?.user !== undefined,
        onSuccess: (data) => {
          setSelectedSection(selectedSection ?? data[0] ?? null);
        },
      }
  );

  const createSection = api.section.create.useMutation({
    onSuccess: () => {
      void refetchSections();
    },
  });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    { sectionId: selectedSection?.id ?? '' },
    { enabled: sessionData?.user !== undefined && selectedSection !== null },
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  })

  return (
    <div>
      <ul>
        {sections?.map((section) => (
          <li>
            <a
              href='#'
              onClick={(e) => {
                e.preventDefault();
                setSelectedSection(section);
              }}
            >
              {section.title}
            </a>
          </li>
        ))}
      </ul>

      <input
        type="text"
        placeholder="New Section"
        onKeyDown={(e) => {
          if (e.key === 'Enter') {
            createSection.mutate({
              title: e.currentTarget.value,
            });

            e.currentTarget.value = "";
          }
        }}
      />

      <div>
        {notes?.map((note) => (
          <NoteCard
            note={note}
            onDelete={() => void deleteNote.mutate({ id: note.id })}
          />
        ))}
      </div>

      <NoteEditor
        onSave={({ title, content }) => {
          void createNote.mutate({
            title,
            content,
            sectionId: selectedSection?.id ?? '',
          })
        }}
      />
    </div>
  );
}
